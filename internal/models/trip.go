// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Trip is an object representing the database table.
type Trip struct {
	ID             string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt      time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ScheduledFor   time.Time         `boil:"scheduled_for" json:"scheduled_for" toml:"scheduled_for" yaml:"scheduled_for"`
	Latitude       float64           `boil:"latitude" json:"latitude" toml:"latitude" yaml:"latitude"`
	Longitude      float64           `boil:"longitude" json:"longitude" toml:"longitude" yaml:"longitude"`
	ExpectedPay    float64           `boil:"expected_pay" json:"expected_pay" toml:"expected_pay" yaml:"expected_pay"`
	R7Cell         null.String       `boil:"r7_cell" json:"r7_cell,omitempty" toml:"r7_cell" yaml:"r7_cell,omitempty"`
	R8Cell         null.String       `boil:"r8_cell" json:"r8_cell,omitempty" toml:"r8_cell" yaml:"r8_cell,omitempty"`
	R9Cell         null.String       `boil:"r9_cell" json:"r9_cell,omitempty" toml:"r9_cell" yaml:"r9_cell,omitempty"`
	R10Cell        null.String       `boil:"r10_cell" json:"r10_cell,omitempty" toml:"r10_cell" yaml:"r10_cell,omitempty"`
	R7K1Neighbors  types.StringArray `boil:"r7_k1_neighbors" json:"r7_k1_neighbors,omitempty" toml:"r7_k1_neighbors" yaml:"r7_k1_neighbors,omitempty"`
	R8K1Neighbors  types.StringArray `boil:"r8_k1_neighbors" json:"r8_k1_neighbors,omitempty" toml:"r8_k1_neighbors" yaml:"r8_k1_neighbors,omitempty"`
	R8K2Neighbors  types.StringArray `boil:"r8_k2_neighbors" json:"r8_k2_neighbors,omitempty" toml:"r8_k2_neighbors" yaml:"r8_k2_neighbors,omitempty"`
	R9K1Neighbors  types.StringArray `boil:"r9_k1_neighbors" json:"r9_k1_neighbors,omitempty" toml:"r9_k1_neighbors" yaml:"r9_k1_neighbors,omitempty"`
	R9K2Neighbors  types.StringArray `boil:"r9_k2_neighbors" json:"r9_k2_neighbors,omitempty" toml:"r9_k2_neighbors" yaml:"r9_k2_neighbors,omitempty"`
	R10K1Neighbors types.StringArray `boil:"r10_k1_neighbors" json:"r10_k1_neighbors,omitempty" toml:"r10_k1_neighbors" yaml:"r10_k1_neighbors,omitempty"`
	R10K2Neighbors types.StringArray `boil:"r10_k2_neighbors" json:"r10_k2_neighbors,omitempty" toml:"r10_k2_neighbors" yaml:"r10_k2_neighbors,omitempty"`

	R *tripR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tripL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TripColumns = struct {
	ID             string
	CreatedAt      string
	ScheduledFor   string
	Latitude       string
	Longitude      string
	ExpectedPay    string
	R7Cell         string
	R8Cell         string
	R9Cell         string
	R10Cell        string
	R7K1Neighbors  string
	R8K1Neighbors  string
	R8K2Neighbors  string
	R9K1Neighbors  string
	R9K2Neighbors  string
	R10K1Neighbors string
	R10K2Neighbors string
}{
	ID:             "id",
	CreatedAt:      "created_at",
	ScheduledFor:   "scheduled_for",
	Latitude:       "latitude",
	Longitude:      "longitude",
	ExpectedPay:    "expected_pay",
	R7Cell:         "r7_cell",
	R8Cell:         "r8_cell",
	R9Cell:         "r9_cell",
	R10Cell:        "r10_cell",
	R7K1Neighbors:  "r7_k1_neighbors",
	R8K1Neighbors:  "r8_k1_neighbors",
	R8K2Neighbors:  "r8_k2_neighbors",
	R9K1Neighbors:  "r9_k1_neighbors",
	R9K2Neighbors:  "r9_k2_neighbors",
	R10K1Neighbors: "r10_k1_neighbors",
	R10K2Neighbors: "r10_k2_neighbors",
}

var TripTableColumns = struct {
	ID             string
	CreatedAt      string
	ScheduledFor   string
	Latitude       string
	Longitude      string
	ExpectedPay    string
	R7Cell         string
	R8Cell         string
	R9Cell         string
	R10Cell        string
	R7K1Neighbors  string
	R8K1Neighbors  string
	R8K2Neighbors  string
	R9K1Neighbors  string
	R9K2Neighbors  string
	R10K1Neighbors string
	R10K2Neighbors string
}{
	ID:             "trip.id",
	CreatedAt:      "trip.created_at",
	ScheduledFor:   "trip.scheduled_for",
	Latitude:       "trip.latitude",
	Longitude:      "trip.longitude",
	ExpectedPay:    "trip.expected_pay",
	R7Cell:         "trip.r7_cell",
	R8Cell:         "trip.r8_cell",
	R9Cell:         "trip.r9_cell",
	R10Cell:        "trip.r10_cell",
	R7K1Neighbors:  "trip.r7_k1_neighbors",
	R8K1Neighbors:  "trip.r8_k1_neighbors",
	R8K2Neighbors:  "trip.r8_k2_neighbors",
	R9K1Neighbors:  "trip.r9_k1_neighbors",
	R9K2Neighbors:  "trip.r9_k2_neighbors",
	R10K1Neighbors: "trip.r10_k1_neighbors",
	R10K2Neighbors: "trip.r10_k2_neighbors",
}

// Generated where

var TripWhere = struct {
	ID             whereHelperstring
	CreatedAt      whereHelpertime_Time
	ScheduledFor   whereHelpertime_Time
	Latitude       whereHelperfloat64
	Longitude      whereHelperfloat64
	ExpectedPay    whereHelperfloat64
	R7Cell         whereHelpernull_String
	R8Cell         whereHelpernull_String
	R9Cell         whereHelpernull_String
	R10Cell        whereHelpernull_String
	R7K1Neighbors  whereHelpertypes_StringArray
	R8K1Neighbors  whereHelpertypes_StringArray
	R8K2Neighbors  whereHelpertypes_StringArray
	R9K1Neighbors  whereHelpertypes_StringArray
	R9K2Neighbors  whereHelpertypes_StringArray
	R10K1Neighbors whereHelpertypes_StringArray
	R10K2Neighbors whereHelpertypes_StringArray
}{
	ID:             whereHelperstring{field: "\"trip\".\"id\""},
	CreatedAt:      whereHelpertime_Time{field: "\"trip\".\"created_at\""},
	ScheduledFor:   whereHelpertime_Time{field: "\"trip\".\"scheduled_for\""},
	Latitude:       whereHelperfloat64{field: "\"trip\".\"latitude\""},
	Longitude:      whereHelperfloat64{field: "\"trip\".\"longitude\""},
	ExpectedPay:    whereHelperfloat64{field: "\"trip\".\"expected_pay\""},
	R7Cell:         whereHelpernull_String{field: "\"trip\".\"r7_cell\""},
	R8Cell:         whereHelpernull_String{field: "\"trip\".\"r8_cell\""},
	R9Cell:         whereHelpernull_String{field: "\"trip\".\"r9_cell\""},
	R10Cell:        whereHelpernull_String{field: "\"trip\".\"r10_cell\""},
	R7K1Neighbors:  whereHelpertypes_StringArray{field: "\"trip\".\"r7_k1_neighbors\""},
	R8K1Neighbors:  whereHelpertypes_StringArray{field: "\"trip\".\"r8_k1_neighbors\""},
	R8K2Neighbors:  whereHelpertypes_StringArray{field: "\"trip\".\"r8_k2_neighbors\""},
	R9K1Neighbors:  whereHelpertypes_StringArray{field: "\"trip\".\"r9_k1_neighbors\""},
	R9K2Neighbors:  whereHelpertypes_StringArray{field: "\"trip\".\"r9_k2_neighbors\""},
	R10K1Neighbors: whereHelpertypes_StringArray{field: "\"trip\".\"r10_k1_neighbors\""},
	R10K2Neighbors: whereHelpertypes_StringArray{field: "\"trip\".\"r10_k2_neighbors\""},
}

// TripRels is where relationship names are stored.
var TripRels = struct {
}{}

// tripR is where relationships are stored.
type tripR struct {
}

// NewStruct creates a new relationship struct
func (*tripR) NewStruct() *tripR {
	return &tripR{}
}

// tripL is where Load methods for each relationship are stored.
type tripL struct{}

var (
	tripAllColumns            = []string{"id", "created_at", "scheduled_for", "latitude", "longitude", "expected_pay", "r7_cell", "r8_cell", "r9_cell", "r10_cell", "r7_k1_neighbors", "r8_k1_neighbors", "r8_k2_neighbors", "r9_k1_neighbors", "r9_k2_neighbors", "r10_k1_neighbors", "r10_k2_neighbors"}
	tripColumnsWithoutDefault = []string{"id", "scheduled_for", "latitude", "longitude", "expected_pay"}
	tripColumnsWithDefault    = []string{"created_at", "r7_cell", "r8_cell", "r9_cell", "r10_cell", "r7_k1_neighbors", "r8_k1_neighbors", "r8_k2_neighbors", "r9_k1_neighbors", "r9_k2_neighbors", "r10_k1_neighbors", "r10_k2_neighbors"}
	tripPrimaryKeyColumns     = []string{"id"}
	tripGeneratedColumns      = []string{}
)

type (
	// TripSlice is an alias for a slice of pointers to Trip.
	// This should almost always be used instead of []Trip.
	TripSlice []*Trip
	// TripHook is the signature for custom Trip hook methods
	TripHook func(context.Context, boil.ContextExecutor, *Trip) error

	tripQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tripType                 = reflect.TypeOf(&Trip{})
	tripMapping              = queries.MakeStructMapping(tripType)
	tripPrimaryKeyMapping, _ = queries.BindMapping(tripType, tripMapping, tripPrimaryKeyColumns)
	tripInsertCacheMut       sync.RWMutex
	tripInsertCache          = make(map[string]insertCache)
	tripUpdateCacheMut       sync.RWMutex
	tripUpdateCache          = make(map[string]updateCache)
	tripUpsertCacheMut       sync.RWMutex
	tripUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tripAfterSelectHooks []TripHook

var tripBeforeInsertHooks []TripHook
var tripAfterInsertHooks []TripHook

var tripBeforeUpdateHooks []TripHook
var tripAfterUpdateHooks []TripHook

var tripBeforeDeleteHooks []TripHook
var tripAfterDeleteHooks []TripHook

var tripBeforeUpsertHooks []TripHook
var tripAfterUpsertHooks []TripHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Trip) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tripAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Trip) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tripBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Trip) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tripAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Trip) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tripBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Trip) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tripAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Trip) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tripBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Trip) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tripAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Trip) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tripBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Trip) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tripAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTripHook registers your hook function for all future operations.
func AddTripHook(hookPoint boil.HookPoint, tripHook TripHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tripAfterSelectHooks = append(tripAfterSelectHooks, tripHook)
	case boil.BeforeInsertHook:
		tripBeforeInsertHooks = append(tripBeforeInsertHooks, tripHook)
	case boil.AfterInsertHook:
		tripAfterInsertHooks = append(tripAfterInsertHooks, tripHook)
	case boil.BeforeUpdateHook:
		tripBeforeUpdateHooks = append(tripBeforeUpdateHooks, tripHook)
	case boil.AfterUpdateHook:
		tripAfterUpdateHooks = append(tripAfterUpdateHooks, tripHook)
	case boil.BeforeDeleteHook:
		tripBeforeDeleteHooks = append(tripBeforeDeleteHooks, tripHook)
	case boil.AfterDeleteHook:
		tripAfterDeleteHooks = append(tripAfterDeleteHooks, tripHook)
	case boil.BeforeUpsertHook:
		tripBeforeUpsertHooks = append(tripBeforeUpsertHooks, tripHook)
	case boil.AfterUpsertHook:
		tripAfterUpsertHooks = append(tripAfterUpsertHooks, tripHook)
	}
}

// One returns a single trip record from the query.
func (q tripQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Trip, error) {
	o := &Trip{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for trip")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Trip records from the query.
func (q tripQuery) All(ctx context.Context, exec boil.ContextExecutor) (TripSlice, error) {
	var o []*Trip

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Trip slice")
	}

	if len(tripAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Trip records in the query.
func (q tripQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count trip rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tripQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if trip exists")
	}

	return count > 0, nil
}

// Trips retrieves all the records using an executor.
func Trips(mods ...qm.QueryMod) tripQuery {
	mods = append(mods, qm.From("\"trip\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"trip\".*"})
	}

	return tripQuery{q}
}

// FindTrip retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTrip(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Trip, error) {
	tripObj := &Trip{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"trip\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tripObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from trip")
	}

	if err = tripObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tripObj, err
	}

	return tripObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Trip) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trip provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tripColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tripInsertCacheMut.RLock()
	cache, cached := tripInsertCache[key]
	tripInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tripAllColumns,
			tripColumnsWithDefault,
			tripColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tripType, tripMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tripType, tripMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"trip\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"trip\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into trip")
	}

	if !cached {
		tripInsertCacheMut.Lock()
		tripInsertCache[key] = cache
		tripInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Trip.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Trip) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tripUpdateCacheMut.RLock()
	cache, cached := tripUpdateCache[key]
	tripUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tripAllColumns,
			tripPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update trip, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"trip\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tripPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tripType, tripMapping, append(wl, tripPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update trip row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for trip")
	}

	if !cached {
		tripUpdateCacheMut.Lock()
		tripUpdateCache[key] = cache
		tripUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tripQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for trip")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for trip")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TripSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tripPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"trip\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tripPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in trip slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all trip")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Trip) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trip provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tripColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tripUpsertCacheMut.RLock()
	cache, cached := tripUpsertCache[key]
	tripUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tripAllColumns,
			tripColumnsWithDefault,
			tripColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tripAllColumns,
			tripPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert trip, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tripPrimaryKeyColumns))
			copy(conflict, tripPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"trip\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tripType, tripMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tripType, tripMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert trip")
	}

	if !cached {
		tripUpsertCacheMut.Lock()
		tripUpsertCache[key] = cache
		tripUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Trip record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Trip) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Trip provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tripPrimaryKeyMapping)
	sql := "DELETE FROM \"trip\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from trip")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for trip")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tripQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tripQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from trip")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trip")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TripSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tripBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tripPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"trip\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tripPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from trip slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trip")
	}

	if len(tripAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Trip) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTrip(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TripSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TripSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tripPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"trip\".* FROM \"trip\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tripPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TripSlice")
	}

	*o = slice

	return nil
}

// TripExists checks if the Trip row exists.
func TripExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"trip\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if trip exists")
	}

	return exists, nil
}

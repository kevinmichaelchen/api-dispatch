// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDriverLocations(t *testing.T) {
	t.Parallel()

	query := DriverLocations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDriverLocationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DriverLocation{}
	if err = randomize.Struct(seed, o, driverLocationDBTypes, true, driverLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DriverLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DriverLocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDriverLocationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DriverLocation{}
	if err = randomize.Struct(seed, o, driverLocationDBTypes, true, driverLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DriverLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DriverLocations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DriverLocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDriverLocationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DriverLocation{}
	if err = randomize.Struct(seed, o, driverLocationDBTypes, true, driverLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DriverLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DriverLocationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DriverLocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDriverLocationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DriverLocation{}
	if err = randomize.Struct(seed, o, driverLocationDBTypes, true, driverLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DriverLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DriverLocationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DriverLocation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DriverLocationExists to return true, but got false.")
	}
}

func testDriverLocationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DriverLocation{}
	if err = randomize.Struct(seed, o, driverLocationDBTypes, true, driverLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DriverLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	driverLocationFound, err := FindDriverLocation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if driverLocationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDriverLocationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DriverLocation{}
	if err = randomize.Struct(seed, o, driverLocationDBTypes, true, driverLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DriverLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DriverLocations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDriverLocationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DriverLocation{}
	if err = randomize.Struct(seed, o, driverLocationDBTypes, true, driverLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DriverLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DriverLocations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDriverLocationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	driverLocationOne := &DriverLocation{}
	driverLocationTwo := &DriverLocation{}
	if err = randomize.Struct(seed, driverLocationOne, driverLocationDBTypes, false, driverLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DriverLocation struct: %s", err)
	}
	if err = randomize.Struct(seed, driverLocationTwo, driverLocationDBTypes, false, driverLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DriverLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = driverLocationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = driverLocationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DriverLocations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDriverLocationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	driverLocationOne := &DriverLocation{}
	driverLocationTwo := &DriverLocation{}
	if err = randomize.Struct(seed, driverLocationOne, driverLocationDBTypes, false, driverLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DriverLocation struct: %s", err)
	}
	if err = randomize.Struct(seed, driverLocationTwo, driverLocationDBTypes, false, driverLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DriverLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = driverLocationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = driverLocationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DriverLocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func driverLocationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DriverLocation) error {
	*o = DriverLocation{}
	return nil
}

func driverLocationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DriverLocation) error {
	*o = DriverLocation{}
	return nil
}

func driverLocationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DriverLocation) error {
	*o = DriverLocation{}
	return nil
}

func driverLocationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DriverLocation) error {
	*o = DriverLocation{}
	return nil
}

func driverLocationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DriverLocation) error {
	*o = DriverLocation{}
	return nil
}

func driverLocationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DriverLocation) error {
	*o = DriverLocation{}
	return nil
}

func driverLocationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DriverLocation) error {
	*o = DriverLocation{}
	return nil
}

func driverLocationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DriverLocation) error {
	*o = DriverLocation{}
	return nil
}

func driverLocationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DriverLocation) error {
	*o = DriverLocation{}
	return nil
}

func testDriverLocationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DriverLocation{}
	o := &DriverLocation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, driverLocationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DriverLocation object: %s", err)
	}

	AddDriverLocationHook(boil.BeforeInsertHook, driverLocationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	driverLocationBeforeInsertHooks = []DriverLocationHook{}

	AddDriverLocationHook(boil.AfterInsertHook, driverLocationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	driverLocationAfterInsertHooks = []DriverLocationHook{}

	AddDriverLocationHook(boil.AfterSelectHook, driverLocationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	driverLocationAfterSelectHooks = []DriverLocationHook{}

	AddDriverLocationHook(boil.BeforeUpdateHook, driverLocationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	driverLocationBeforeUpdateHooks = []DriverLocationHook{}

	AddDriverLocationHook(boil.AfterUpdateHook, driverLocationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	driverLocationAfterUpdateHooks = []DriverLocationHook{}

	AddDriverLocationHook(boil.BeforeDeleteHook, driverLocationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	driverLocationBeforeDeleteHooks = []DriverLocationHook{}

	AddDriverLocationHook(boil.AfterDeleteHook, driverLocationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	driverLocationAfterDeleteHooks = []DriverLocationHook{}

	AddDriverLocationHook(boil.BeforeUpsertHook, driverLocationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	driverLocationBeforeUpsertHooks = []DriverLocationHook{}

	AddDriverLocationHook(boil.AfterUpsertHook, driverLocationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	driverLocationAfterUpsertHooks = []DriverLocationHook{}
}

func testDriverLocationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DriverLocation{}
	if err = randomize.Struct(seed, o, driverLocationDBTypes, true, driverLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DriverLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DriverLocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDriverLocationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DriverLocation{}
	if err = randomize.Struct(seed, o, driverLocationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DriverLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(driverLocationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DriverLocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDriverLocationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DriverLocation{}
	if err = randomize.Struct(seed, o, driverLocationDBTypes, true, driverLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DriverLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDriverLocationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DriverLocation{}
	if err = randomize.Struct(seed, o, driverLocationDBTypes, true, driverLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DriverLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DriverLocationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDriverLocationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DriverLocation{}
	if err = randomize.Struct(seed, o, driverLocationDBTypes, true, driverLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DriverLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DriverLocations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	driverLocationDBTypes = map[string]string{`ID`: `text`, `CreatedAt`: `timestamp with time zone`, `DriverID`: `text`, `Latitude`: `double precision`, `Longitude`: `double precision`, `R7Cell`: `text`, `R8Cell`: `text`, `R9Cell`: `text`, `R10Cell`: `text`, `R7K1Neighbors`: `ARRAYtext`, `R8K1Neighbors`: `ARRAYtext`, `R8K2Neighbors`: `ARRAYtext`, `R9K1Neighbors`: `ARRAYtext`, `R9K2Neighbors`: `ARRAYtext`, `R10K1Neighbors`: `ARRAYtext`, `R10K2Neighbors`: `ARRAYtext`}
	_                     = bytes.MinRead
)

func testDriverLocationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(driverLocationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(driverLocationAllColumns) == len(driverLocationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DriverLocation{}
	if err = randomize.Struct(seed, o, driverLocationDBTypes, true, driverLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DriverLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DriverLocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, driverLocationDBTypes, true, driverLocationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DriverLocation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDriverLocationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(driverLocationAllColumns) == len(driverLocationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DriverLocation{}
	if err = randomize.Struct(seed, o, driverLocationDBTypes, true, driverLocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DriverLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DriverLocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, driverLocationDBTypes, true, driverLocationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DriverLocation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(driverLocationAllColumns, driverLocationPrimaryKeyColumns) {
		fields = driverLocationAllColumns
	} else {
		fields = strmangle.SetComplement(
			driverLocationAllColumns,
			driverLocationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DriverLocationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDriverLocationsUpsert(t *testing.T) {
	t.Parallel()

	if len(driverLocationAllColumns) == len(driverLocationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DriverLocation{}
	if err = randomize.Struct(seed, &o, driverLocationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DriverLocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DriverLocation: %s", err)
	}

	count, err := DriverLocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, driverLocationDBTypes, false, driverLocationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DriverLocation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DriverLocation: %s", err)
	}

	count, err = DriverLocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

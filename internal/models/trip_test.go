// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTrips(t *testing.T) {
	t.Parallel()

	query := Trips()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTripsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Trip{}
	if err = randomize.Struct(seed, o, tripDBTypes, true, tripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Trips().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTripsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Trip{}
	if err = randomize.Struct(seed, o, tripDBTypes, true, tripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Trips().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Trips().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTripsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Trip{}
	if err = randomize.Struct(seed, o, tripDBTypes, true, tripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TripSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Trips().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTripsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Trip{}
	if err = randomize.Struct(seed, o, tripDBTypes, true, tripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TripExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Trip exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TripExists to return true, but got false.")
	}
}

func testTripsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Trip{}
	if err = randomize.Struct(seed, o, tripDBTypes, true, tripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	tripFound, err := FindTrip(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if tripFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTripsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Trip{}
	if err = randomize.Struct(seed, o, tripDBTypes, true, tripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Trips().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTripsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Trip{}
	if err = randomize.Struct(seed, o, tripDBTypes, true, tripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Trips().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTripsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tripOne := &Trip{}
	tripTwo := &Trip{}
	if err = randomize.Struct(seed, tripOne, tripDBTypes, false, tripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trip struct: %s", err)
	}
	if err = randomize.Struct(seed, tripTwo, tripDBTypes, false, tripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tripOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tripTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Trips().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTripsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tripOne := &Trip{}
	tripTwo := &Trip{}
	if err = randomize.Struct(seed, tripOne, tripDBTypes, false, tripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trip struct: %s", err)
	}
	if err = randomize.Struct(seed, tripTwo, tripDBTypes, false, tripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tripOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tripTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Trips().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func tripBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Trip) error {
	*o = Trip{}
	return nil
}

func tripAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Trip) error {
	*o = Trip{}
	return nil
}

func tripAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Trip) error {
	*o = Trip{}
	return nil
}

func tripBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Trip) error {
	*o = Trip{}
	return nil
}

func tripAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Trip) error {
	*o = Trip{}
	return nil
}

func tripBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Trip) error {
	*o = Trip{}
	return nil
}

func tripAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Trip) error {
	*o = Trip{}
	return nil
}

func tripBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Trip) error {
	*o = Trip{}
	return nil
}

func tripAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Trip) error {
	*o = Trip{}
	return nil
}

func testTripsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Trip{}
	o := &Trip{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tripDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Trip object: %s", err)
	}

	AddTripHook(boil.BeforeInsertHook, tripBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tripBeforeInsertHooks = []TripHook{}

	AddTripHook(boil.AfterInsertHook, tripAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tripAfterInsertHooks = []TripHook{}

	AddTripHook(boil.AfterSelectHook, tripAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tripAfterSelectHooks = []TripHook{}

	AddTripHook(boil.BeforeUpdateHook, tripBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tripBeforeUpdateHooks = []TripHook{}

	AddTripHook(boil.AfterUpdateHook, tripAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tripAfterUpdateHooks = []TripHook{}

	AddTripHook(boil.BeforeDeleteHook, tripBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tripBeforeDeleteHooks = []TripHook{}

	AddTripHook(boil.AfterDeleteHook, tripAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tripAfterDeleteHooks = []TripHook{}

	AddTripHook(boil.BeforeUpsertHook, tripBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tripBeforeUpsertHooks = []TripHook{}

	AddTripHook(boil.AfterUpsertHook, tripAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tripAfterUpsertHooks = []TripHook{}
}

func testTripsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Trip{}
	if err = randomize.Struct(seed, o, tripDBTypes, true, tripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Trips().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTripsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Trip{}
	if err = randomize.Struct(seed, o, tripDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Trip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(tripColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Trips().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTripsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Trip{}
	if err = randomize.Struct(seed, o, tripDBTypes, true, tripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTripsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Trip{}
	if err = randomize.Struct(seed, o, tripDBTypes, true, tripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TripSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTripsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Trip{}
	if err = randomize.Struct(seed, o, tripDBTypes, true, tripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Trips().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tripDBTypes = map[string]string{`ID`: `text`, `CreatedAt`: `timestamp with time zone`, `ScheduledFor`: `timestamp with time zone`, `Latitude`: `double precision`, `Longitude`: `double precision`, `ExpectedPay`: `double precision`, `R7Cell`: `text`, `R8Cell`: `text`, `R9Cell`: `text`, `R10Cell`: `text`, `R7K1Neighbors`: `ARRAYtext`, `R8K1Neighbors`: `ARRAYtext`, `R8K2Neighbors`: `ARRAYtext`, `R9K1Neighbors`: `ARRAYtext`, `R9K2Neighbors`: `ARRAYtext`, `R10K1Neighbors`: `ARRAYtext`, `R10K2Neighbors`: `ARRAYtext`}
	_           = bytes.MinRead
)

func testTripsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(tripPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(tripAllColumns) == len(tripPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Trip{}
	if err = randomize.Struct(seed, o, tripDBTypes, true, tripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Trips().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tripDBTypes, true, tripPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Trip struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTripsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tripAllColumns) == len(tripPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Trip{}
	if err = randomize.Struct(seed, o, tripDBTypes, true, tripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Trips().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tripDBTypes, true, tripPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Trip struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tripAllColumns, tripPrimaryKeyColumns) {
		fields = tripAllColumns
	} else {
		fields = strmangle.SetComplement(
			tripAllColumns,
			tripPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TripSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTripsUpsert(t *testing.T) {
	t.Parallel()

	if len(tripAllColumns) == len(tripPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Trip{}
	if err = randomize.Struct(seed, &o, tripDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Trip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Trip: %s", err)
	}

	count, err := Trips().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, tripDBTypes, false, tripPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Trip struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Trip: %s", err)
	}

	count, err = Trips().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

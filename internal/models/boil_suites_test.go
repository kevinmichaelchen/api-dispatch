// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("DriverLocations", testDriverLocations)
	t.Run("SchemaMigrations", testSchemaMigrations)
	t.Run("SpatialRefSys", testSpatialRefSys)
	t.Run("Trips", testTrips)
}

func TestDelete(t *testing.T) {
	t.Run("DriverLocations", testDriverLocationsDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
	t.Run("SpatialRefSys", testSpatialRefSysDelete)
	t.Run("Trips", testTripsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("DriverLocations", testDriverLocationsQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
	t.Run("SpatialRefSys", testSpatialRefSysQueryDeleteAll)
	t.Run("Trips", testTripsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("DriverLocations", testDriverLocationsSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
	t.Run("SpatialRefSys", testSpatialRefSysSliceDeleteAll)
	t.Run("Trips", testTripsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("DriverLocations", testDriverLocationsExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
	t.Run("SpatialRefSys", testSpatialRefSysExists)
	t.Run("Trips", testTripsExists)
}

func TestFind(t *testing.T) {
	t.Run("DriverLocations", testDriverLocationsFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
	t.Run("SpatialRefSys", testSpatialRefSysFind)
	t.Run("Trips", testTripsFind)
}

func TestBind(t *testing.T) {
	t.Run("DriverLocations", testDriverLocationsBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
	t.Run("SpatialRefSys", testSpatialRefSysBind)
	t.Run("Trips", testTripsBind)
}

func TestOne(t *testing.T) {
	t.Run("DriverLocations", testDriverLocationsOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
	t.Run("SpatialRefSys", testSpatialRefSysOne)
	t.Run("Trips", testTripsOne)
}

func TestAll(t *testing.T) {
	t.Run("DriverLocations", testDriverLocationsAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
	t.Run("SpatialRefSys", testSpatialRefSysAll)
	t.Run("Trips", testTripsAll)
}

func TestCount(t *testing.T) {
	t.Run("DriverLocations", testDriverLocationsCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
	t.Run("SpatialRefSys", testSpatialRefSysCount)
	t.Run("Trips", testTripsCount)
}

func TestHooks(t *testing.T) {
	t.Run("DriverLocations", testDriverLocationsHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
	t.Run("SpatialRefSys", testSpatialRefSysHooks)
	t.Run("Trips", testTripsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("DriverLocations", testDriverLocationsInsert)
	t.Run("DriverLocations", testDriverLocationsInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
	t.Run("SpatialRefSys", testSpatialRefSysInsert)
	t.Run("SpatialRefSys", testSpatialRefSysInsertWhitelist)
	t.Run("Trips", testTripsInsert)
	t.Run("Trips", testTripsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("DriverLocations", testDriverLocationsReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
	t.Run("SpatialRefSys", testSpatialRefSysReload)
	t.Run("Trips", testTripsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("DriverLocations", testDriverLocationsReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
	t.Run("SpatialRefSys", testSpatialRefSysReloadAll)
	t.Run("Trips", testTripsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("DriverLocations", testDriverLocationsSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
	t.Run("SpatialRefSys", testSpatialRefSysSelect)
	t.Run("Trips", testTripsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("DriverLocations", testDriverLocationsUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
	t.Run("SpatialRefSys", testSpatialRefSysUpdate)
	t.Run("Trips", testTripsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("DriverLocations", testDriverLocationsSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
	t.Run("SpatialRefSys", testSpatialRefSysSliceUpdateAll)
	t.Run("Trips", testTripsSliceUpdateAll)
}

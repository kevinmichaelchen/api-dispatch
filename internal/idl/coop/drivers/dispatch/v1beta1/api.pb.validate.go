// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: coop/drivers/dispatch/v1beta1/api.proto

package v1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpdateDriverLocationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDriverLocationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDriverLocationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDriverLocationsRequestMultiError, or nil if none found.
func (m *UpdateDriverLocationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDriverLocationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetLocations()); l < 1 || l > 1000 {
		err := UpdateDriverLocationsRequestValidationError{
			field:  "Locations",
			reason: "value must contain between 1 and 1000 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetLocations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateDriverLocationsRequestValidationError{
						field:  fmt.Sprintf("Locations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateDriverLocationsRequestValidationError{
						field:  fmt.Sprintf("Locations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateDriverLocationsRequestValidationError{
					field:  fmt.Sprintf("Locations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateDriverLocationsRequestMultiError(errors)
	}

	return nil
}

// UpdateDriverLocationsRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateDriverLocationsRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateDriverLocationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDriverLocationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDriverLocationsRequestMultiError) AllErrors() []error { return m }

// UpdateDriverLocationsRequestValidationError is the validation error returned
// by UpdateDriverLocationsRequest.Validate if the designated constraints
// aren't met.
type UpdateDriverLocationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDriverLocationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDriverLocationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDriverLocationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDriverLocationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDriverLocationsRequestValidationError) ErrorName() string {
	return "UpdateDriverLocationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDriverLocationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDriverLocationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDriverLocationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDriverLocationsRequestValidationError{}

// Validate checks the field values on UpdateDriverLocationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDriverLocationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDriverLocationsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateDriverLocationsResponseMultiError, or nil if none found.
func (m *UpdateDriverLocationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDriverLocationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDriverLocationsResponseMultiError(errors)
	}

	return nil
}

// UpdateDriverLocationsResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateDriverLocationsResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateDriverLocationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDriverLocationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDriverLocationsResponseMultiError) AllErrors() []error { return m }

// UpdateDriverLocationsResponseValidationError is the validation error
// returned by UpdateDriverLocationsResponse.Validate if the designated
// constraints aren't met.
type UpdateDriverLocationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDriverLocationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDriverLocationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDriverLocationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDriverLocationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDriverLocationsResponseValidationError) ErrorName() string {
	return "UpdateDriverLocationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDriverLocationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDriverLocationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDriverLocationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDriverLocationsResponseValidationError{}

// Validate checks the field values on CreateTripsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTripsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTripsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTripsRequestMultiError, or nil if none found.
func (m *CreateTripsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTripsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetTrips()); l < 1 || l > 1000 {
		err := CreateTripsRequestValidationError{
			field:  "Trips",
			reason: "value must contain between 1 and 1000 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetTrips() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateTripsRequestValidationError{
						field:  fmt.Sprintf("Trips[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateTripsRequestValidationError{
						field:  fmt.Sprintf("Trips[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateTripsRequestValidationError{
					field:  fmt.Sprintf("Trips[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateTripsRequestMultiError(errors)
	}

	return nil
}

// CreateTripsRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTripsRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTripsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTripsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTripsRequestMultiError) AllErrors() []error { return m }

// CreateTripsRequestValidationError is the validation error returned by
// CreateTripsRequest.Validate if the designated constraints aren't met.
type CreateTripsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTripsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTripsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTripsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTripsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTripsRequestValidationError) ErrorName() string {
	return "CreateTripsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTripsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTripsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTripsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTripsRequestValidationError{}

// Validate checks the field values on CreateTripsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTripsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTripsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTripsResponseMultiError, or nil if none found.
func (m *CreateTripsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTripsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateTripsResponseMultiError(errors)
	}

	return nil
}

// CreateTripsResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTripsResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTripsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTripsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTripsResponseMultiError) AllErrors() []error { return m }

// CreateTripsResponseValidationError is the validation error returned by
// CreateTripsResponse.Validate if the designated constraints aren't met.
type CreateTripsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTripsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTripsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTripsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTripsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTripsResponseValidationError) ErrorName() string {
	return "CreateTripsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTripsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTripsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTripsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTripsResponseValidationError{}

// Validate checks the field values on GetNearestDriversRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNearestDriversRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNearestDriversRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNearestDriversRequestMultiError, or nil if none found.
func (m *GetNearestDriversRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNearestDriversRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPickupLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNearestDriversRequestValidationError{
					field:  "PickupLocation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNearestDriversRequestValidationError{
					field:  "PickupLocation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPickupLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNearestDriversRequestValidationError{
				field:  "PickupLocation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if val := m.GetLimit(); val <= 0 || val > 1000 {
		err := GetNearestDriversRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetNearestDriversRequestMultiError(errors)
	}

	return nil
}

// GetNearestDriversRequestMultiError is an error wrapping multiple validation
// errors returned by GetNearestDriversRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNearestDriversRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNearestDriversRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNearestDriversRequestMultiError) AllErrors() []error { return m }

// GetNearestDriversRequestValidationError is the validation error returned by
// GetNearestDriversRequest.Validate if the designated constraints aren't met.
type GetNearestDriversRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNearestDriversRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNearestDriversRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNearestDriversRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNearestDriversRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNearestDriversRequestValidationError) ErrorName() string {
	return "GetNearestDriversRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNearestDriversRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNearestDriversRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNearestDriversRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNearestDriversRequestValidationError{}

// Validate checks the field values on GetNearestDriversResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNearestDriversResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNearestDriversResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNearestDriversResponseMultiError, or nil if none found.
func (m *GetNearestDriversResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNearestDriversResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNearestDriversResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNearestDriversResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNearestDriversResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PickupAddress

	if len(errors) > 0 {
		return GetNearestDriversResponseMultiError(errors)
	}

	return nil
}

// GetNearestDriversResponseMultiError is an error wrapping multiple validation
// errors returned by GetNearestDriversResponse.ValidateAll() if the
// designated constraints aren't met.
type GetNearestDriversResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNearestDriversResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNearestDriversResponseMultiError) AllErrors() []error { return m }

// GetNearestDriversResponseValidationError is the validation error returned by
// GetNearestDriversResponse.Validate if the designated constraints aren't met.
type GetNearestDriversResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNearestDriversResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNearestDriversResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNearestDriversResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNearestDriversResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNearestDriversResponseValidationError) ErrorName() string {
	return "GetNearestDriversResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNearestDriversResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNearestDriversResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNearestDriversResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNearestDriversResponseValidationError{}

// Validate checks the field values on GetNearestTripsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNearestTripsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNearestTripsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNearestTripsRequestMultiError, or nil if none found.
func (m *GetNearestTripsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNearestTripsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetLimit(); val <= 0 || val > 1000 {
		err := GetNearestTripsRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch m.Driver.(type) {

	case *GetNearestTripsRequest_DriverId:
		// no validation rules for DriverId

	case *GetNearestTripsRequest_DriverLocation:

		if all {
			switch v := interface{}(m.GetDriverLocation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNearestTripsRequestValidationError{
						field:  "DriverLocation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNearestTripsRequestValidationError{
						field:  "DriverLocation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDriverLocation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNearestTripsRequestValidationError{
					field:  "DriverLocation",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		err := GetNearestTripsRequestValidationError{
			field:  "Driver",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return GetNearestTripsRequestMultiError(errors)
	}

	return nil
}

// GetNearestTripsRequestMultiError is an error wrapping multiple validation
// errors returned by GetNearestTripsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNearestTripsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNearestTripsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNearestTripsRequestMultiError) AllErrors() []error { return m }

// GetNearestTripsRequestValidationError is the validation error returned by
// GetNearestTripsRequest.Validate if the designated constraints aren't met.
type GetNearestTripsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNearestTripsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNearestTripsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNearestTripsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNearestTripsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNearestTripsRequestValidationError) ErrorName() string {
	return "GetNearestTripsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNearestTripsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNearestTripsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNearestTripsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNearestTripsRequestValidationError{}

// Validate checks the field values on GetNearestTripsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNearestTripsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNearestTripsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNearestTripsResponseMultiError, or nil if none found.
func (m *GetNearestTripsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNearestTripsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNearestTripsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNearestTripsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNearestTripsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetNearestTripsResponseMultiError(errors)
	}

	return nil
}

// GetNearestTripsResponseMultiError is an error wrapping multiple validation
// errors returned by GetNearestTripsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNearestTripsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNearestTripsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNearestTripsResponseMultiError) AllErrors() []error { return m }

// GetNearestTripsResponseValidationError is the validation error returned by
// GetNearestTripsResponse.Validate if the designated constraints aren't met.
type GetNearestTripsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNearestTripsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNearestTripsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNearestTripsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNearestTripsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNearestTripsResponseValidationError) ErrorName() string {
	return "GetNearestTripsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNearestTripsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNearestTripsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNearestTripsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNearestTripsResponseValidationError{}

// Validate checks the field values on SearchResult with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchResultMultiError, or
// nil if none found.
func (m *SearchResult) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DistanceMeters

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchResultValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchResultValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchResultValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchResultValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchResultValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchResultValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Address

	// no validation rules for Resolution

	// no validation rules for KValue

	// no validation rules for Score

	switch m.Payload.(type) {

	case *SearchResult_Trip:

		if all {
			switch v := interface{}(m.GetTrip()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchResultValidationError{
						field:  "Trip",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchResultValidationError{
						field:  "Trip",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTrip()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchResultValidationError{
					field:  "Trip",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SearchResult_Driver:

		if all {
			switch v := interface{}(m.GetDriver()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchResultValidationError{
						field:  "Driver",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchResultValidationError{
						field:  "Driver",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDriver()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchResultValidationError{
					field:  "Driver",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchResultMultiError(errors)
	}

	return nil
}

// SearchResultMultiError is an error wrapping multiple validation errors
// returned by SearchResult.ValidateAll() if the designated constraints aren't met.
type SearchResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchResultMultiError) AllErrors() []error { return m }

// SearchResultValidationError is the validation error returned by
// SearchResult.Validate if the designated constraints aren't met.
type SearchResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchResultValidationError) ErrorName() string { return "SearchResultValidationError" }

// Error satisfies the builtin error interface
func (e SearchResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchResultValidationError{}

// Validate checks the field values on ListDriversRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDriversRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDriversRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDriversRequestMultiError, or nil if none found.
func (m *ListDriversRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDriversRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetPageSize(); val <= 0 || val > 1000 {
		err := ListDriversRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListDriversRequestMultiError(errors)
	}

	return nil
}

// ListDriversRequestMultiError is an error wrapping multiple validation errors
// returned by ListDriversRequest.ValidateAll() if the designated constraints
// aren't met.
type ListDriversRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDriversRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDriversRequestMultiError) AllErrors() []error { return m }

// ListDriversRequestValidationError is the validation error returned by
// ListDriversRequest.Validate if the designated constraints aren't met.
type ListDriversRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDriversRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDriversRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDriversRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDriversRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDriversRequestValidationError) ErrorName() string {
	return "ListDriversRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDriversRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDriversRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDriversRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDriversRequestValidationError{}

// Validate checks the field values on ListDriversResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDriversResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDriversResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDriversResponseMultiError, or nil if none found.
func (m *ListDriversResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDriversResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDriverLocations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDriversResponseValidationError{
						field:  fmt.Sprintf("DriverLocations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDriversResponseValidationError{
						field:  fmt.Sprintf("DriverLocations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDriversResponseValidationError{
					field:  fmt.Sprintf("DriverLocations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListDriversResponseMultiError(errors)
	}

	return nil
}

// ListDriversResponseMultiError is an error wrapping multiple validation
// errors returned by ListDriversResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDriversResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDriversResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDriversResponseMultiError) AllErrors() []error { return m }

// ListDriversResponseValidationError is the validation error returned by
// ListDriversResponse.Validate if the designated constraints aren't met.
type ListDriversResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDriversResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDriversResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDriversResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDriversResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDriversResponseValidationError) ErrorName() string {
	return "ListDriversResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDriversResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDriversResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDriversResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDriversResponseValidationError{}
